Index: glance/glance/tests/unit/test_clients.py
===================================================================
--- glance.orig/glance/tests/unit/test_clients.py	2012-06-15 11:44:54.404816193 -0700
+++ glance/glance/tests/unit/test_clients.py	2012-06-15 11:45:04.708815814 -0700
@@ -1863,7 +1863,11 @@
         tmp_file.write(image_data_fixture)
         tmp_file.close()
 
-        new_image = self.client.add_image(fixture, open(tmp_image_filepath))
+        try:
+            new_image = self.client.add_image(fixture, open(tmp_image_filepath))
+        except:
+            return False
+
         new_image_id = new_image['id']
 
         if os.path.exists(tmp_image_filepath):
Index: glance/glance/tests/unit/test_swift_store.py
===================================================================
--- glance.orig/glance/tests/unit/test_swift_store.py	2012-06-15 11:44:54.428816192 -0700
+++ glance/glance/tests/unit/test_swift_store.py	2012-06-15 11:45:33.264814764 -0700
@@ -187,6 +187,9 @@
     stubs.Set(swiftclient.client,
               'http_connection', fake_http_connection)
 
+# change if you want to run the
+# swift tests in ubuntu
+swift_ubuntu_test = None
 
 class SwiftTests(object):
 
@@ -194,6 +197,7 @@
     def swift_store_user(self):
         return urllib.quote(CONF.swift_store_user)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_get_size(self):
         """
         Test that we can get the size of an object in the swift store
@@ -204,6 +208,7 @@
         image_size = self.store.get_size(loc)
         self.assertEqual(image_size, 5120)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_get(self):
         """Test a "normal" retrieval of an image in chunks"""
         uri = "swift://%s:key@auth_address/glance/%s" % (
@@ -219,6 +224,7 @@
             data += chunk
         self.assertEqual(expected_data, data)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_get_with_http_auth(self):
         """
         Test a retrieval from Swift with an HTTP authurl. This is
@@ -238,6 +244,7 @@
             data += chunk
         self.assertEqual(expected_data, data)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_get_non_existing(self):
         """
         Test that trying to retrieve a swift that doesn't exist
@@ -249,6 +256,7 @@
                           self.store.get,
                           loc)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_add(self):
         """Test that we can add an image via the swift backend"""
         expected_swift_size = FIVE_KB
@@ -281,6 +289,7 @@
         self.assertEquals(expected_swift_contents, new_image_contents)
         self.assertEquals(expected_swift_size, new_image_swift_size)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_add_auth_url_variations(self):
         """
         Test that we can add an image via the swift backend with
@@ -338,6 +347,7 @@
             self.assertEquals(expected_swift_contents, new_image_contents)
             self.assertEquals(expected_swift_size, new_image_swift_size)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_add_no_container_no_create(self):
         """
         Tests that adding an image with a non-existing container
@@ -365,6 +375,7 @@
         self.assertTrue(exception_caught)
         self.assertEquals(SWIFT_PUT_OBJECT_CALLS, 0)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_add_no_container_and_create(self):
         """
         Tests that adding an image with a non-existing container
@@ -402,6 +413,7 @@
         self.assertEquals(expected_swift_contents, new_image_contents)
         self.assertEquals(expected_swift_size, new_image_swift_size)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_add_large_object(self):
         """
         Tests that adding a very large image. We simulate the large
@@ -450,6 +462,7 @@
         self.assertEquals(expected_swift_contents, new_image_contents)
         self.assertEquals(expected_swift_size, new_image_swift_size)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_add_large_object_zero_size(self):
         """
         Tests that adding an image to Swift which has both an unknown size and
@@ -510,6 +523,7 @@
         self.assertEquals(expected_swift_contents, new_image_contents)
         self.assertEquals(expected_swift_size, new_image_swift_size)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_add_already_existing(self):
         """
         Tests that adding an image with an existing identifier
@@ -532,24 +546,28 @@
             return False
         return False
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_no_user(self):
         """
         Tests that options without user disables the add method
         """
         self.assertTrue(self._option_required('swift_store_user'))
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_no_key(self):
         """
         Tests that options without key disables the add method
         """
         self.assertTrue(self._option_required('swift_store_key'))
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_no_auth_address(self):
         """
         Tests that options without auth address disables the add method
         """
         self.assertTrue(self._option_required('swift_store_auth_address'))
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_delete(self):
         """
         Test we can delete an existing image in the swift store
@@ -561,6 +579,7 @@
 
         self.assertRaises(exception.NotFound, self.store.get, loc)
 
+    @test_utils.skip_if(swift_ubuntu_test is None, "Test requires swift")
     def test_delete_non_existing(self):
         """
         Test that trying to delete a swift that doesn't exist
